/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
struct cmp {
    bool operator () (ListNode* la, ListNode* lb) {
        return la->val > lb->val; //最小值优先, 小根堆
    }
};

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0)
            return NULL;
        int n = lists.size();
        priority_queue<ListNode*, vector<ListNode*>, cmp> pq;
        for(int i=0; i<n; i++) {
            if(lists[i] != NULL) 
                pq.push(lists[i]);
        }
        ListNode* temp = new ListNode(-1);//temp head for return;
        ListNode* m = temp;
        while(!pq.empty()) {
            ListNode* tmin = pq.top();
            pq.pop();
            m->next = tmin;
            m = m->next;
            if(tmin->next != NULL)
                pq.push(tmin->next);
        }
        return temp->next;
    }
};


/*
 *the second method to solve this problem.
 *
 */
 
 ListNode* mergeList(ListNode* l1, ListNode* l2) {
        ListNode* ltemp = new ListNode(-1);//temp head
        ListNode* lt = ltemp;
        while(l1!=NULL && l2 != NULL) {
            if(l1->val > l2->val) {
                lt->next = l2;
                l2 = l2->next;
                lt = lt->next;
            }
            else {
                lt -> next = l1;
                l1 = l1 -> next;
                lt = lt -> next;
            }
        }
        lt->next = (l1==NULL)?l2:l1;
        return ltemp->next;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n = lists.size();
        if(n == 0)
            return NULL;
        while(n>1) {
          int i = 0, j = n-1;
          while(i<j) {
              lists[i] = mergeList(lists[i], lists[j]);
              n --;
              i++; j--;
          }
        }
        return lists[0];
    }
